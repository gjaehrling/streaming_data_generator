x-superset-image: &superset-image apache/superset:${TAG:-latest-dev}
x-superset-depends-on: &superset-depends-on
  - db
  - redis
x-superset-volumes: &superset-volumes
  # /app/pythonpath_docker will be appended to the PYTHONPATH in the final container
  - ./docker:/app/docker
  - superset_home:/app/superset_home

version: "3.7"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - ./pinot-docker-demo/zookeeper/data:/data
      - ./pinot-docker-demo/zookeeper/datalog:/datalog

  broker:
      image: confluentinc/cp-server:7.3.2
      hostname: broker
      container_name: broker
      depends_on:
        - zookeeper
      ports:
        - "9092:9092"
        - "9101:9101"
      environment:
        KAFKA_BROKER_ID: 1
        KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
        KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
        KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
        KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
        KAFKA_JMX_PORT: 9101
        KAFKA_JMX_HOSTNAME: localhost
        KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
        CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
        CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
        CONFLUENT_METRICS_ENABLE: 'true'
        CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

  schema-registry:
      image: confluentinc/cp-schema-registry:7.3.2
      hostname: schema-registry
      container_name: schema-registry
      depends_on:
        - broker
      ports:
        - "8081:8081"
      environment:
        SCHEMA_REGISTRY_HOST_NAME: schema-registry
        SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
        SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  connect:
      #image: cnfldemos/cp-server-connect-datagen:0.5.3-7.1.0
      image: cnfldemos/cp-server-connect-datagen:0.6.0-7.3.0
      hostname: connect
      container_name: connect
      depends_on:
        - broker
        - schema-registry
      ports:
        - "8083:8083"
      environment:
        CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
        CONNECT_REST_ADVERTISED_HOST_NAME: connect
        CONNECT_GROUP_ID: compose-connect-group
        CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
        CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
        CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
        CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
        CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
        CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
        CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
        CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
        CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
        CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
        # CLASSPATH required due to CC-2422
        CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-7.3.0.jar
        CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
        CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
        CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
        CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
      volumes:
        - ./scripts/setup_connectors.sh/:/opt/setup_connectors.sh
      command:
        - /bin/bash
        - -c
        - |
          echo "installing connectors"
          confluent-hub install --no-prompt confluentinc/kafka-connect-s3:10.3.1
          confluent-hub install --no-prompt mdrogalis/voluble:0.3.1
          confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:10.0.1
          confluent-hub install --no-prompt confluentinc/kafka-connect-transforms:1.3.2
          confluent-hub install --no-prompt debezium/debezium-connector-postgresql:1.9.7
          confluent-hub install --no-prompt debezium/debezium-connector-mongodb:1.9.7
          confluent-hub install --no-prompt debezium/debezium-connector-sqlserver:2.2.1
          confluent-hub install --no-prompt confluentinc/kafka-connect-elasticsearch:14.0.3
          confluent-hub install --no-prompt snowflakeinc/snowflake-kafka-connector:1.9.3
          #
          # mysql drivers: 
          echo "install mysql drivers"
          cd /usr/share/confluent-hub-components/confluentinc-kafka-connect-jdbc/lib
          wget https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-8.0.23.tar.gz 
          tar -xzvf mysql-connector-java-8.0.23.tar.gz 
          cp mysql-connector-java-8.0.23/mysql-connector-java-8.0.23.jar .
          #
          #echo "launching kafka connect worker"
          /etc/confluent/docker/run
          #sleep infinity

  control-center:
      image: confluentinc/cp-enterprise-control-center:7.3.2
      hostname: control-center
      container_name: control-center
      depends_on:
        - broker
        - schema-registry
        - connect
        - ksqldb-server
      ports:
        - "9021:9021"
      environment:
        CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
        CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'connect:8083'
        CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
        CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
        CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
        CONTROL_CENTER_REPLICATION_FACTOR: 1
        CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
        CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
        CONFLUENT_METRICS_TOPIC_REPLICATION: 1
        PORT: 9021

  ksqldb-server:
      image: confluentinc/cp-ksqldb-server:7.3.2
      hostname: ksqldb-server
      container_name: ksqldb-server
      depends_on:
        - broker
        - connect
      ports:
        - "8088:8088"
      environment:
        KSQL_CONFIG_DIR: "/etc/ksql"
        KSQL_BOOTSTRAP_SERVERS: "broker:29092"
        KSQL_HOST_NAME: ksqldb-server
        KSQL_LISTENERS: "http://0.0.0.0:8088"
        KSQL_CACHE_MAX_BYTES_BUFFERING: 0
        KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
        KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
        KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
        KSQL_KSQL_CONNECT_URL: "http://connect:8083"
        KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
        KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
        KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'

  ksqldb-cli:
      image: confluentinc/cp-ksqldb-cli:7.3.2
      container_name: ksqldb-cli
      depends_on:
        - broker
        - connect
        - ksqldb-server
      entrypoint: /bin/sh
      tty: true

  ksql-datagen:
      image: confluentinc/ksqldb-examples:7.3.2
      hostname: ksql-datagen
      container_name: ksql-datagen
      depends_on:
        - ksqldb-server
        - broker
        - schema-registry
        - connect
      command: "bash -c 'echo Waiting for Kafka to be ready... && \
                         cub kafka-ready -b broker:29092 1 40 && \
                         echo Waiting for Confluent Schema Registry to be ready... && \
                         cub sr-ready schema-registry 8081 40 && \
                         echo Waiting a few seconds for topic creation to finish... && \
                         sleep 11 && \
                         tail -f /dev/null'"
      environment:
        KSQL_CONFIG_DIR: "/etc/ksql"
        STREAMS_BOOTSTRAP_SERVERS: broker:29092
        STREAMS_SCHEMA_REGISTRY_HOST: schema-registry
        STREAMS_SCHEMA_REGISTRY_PORT: 8081

  rest-proxy:
      image: confluentinc/cp-kafka-rest:7.3.2
      depends_on:
        - broker
        - schema-registry
      ports:
        - 8082:8082
      hostname: rest-proxy
      container_name: rest-proxy
      environment:
        KAFKA_REST_HOST_NAME: rest-proxy
        KAFKA_REST_BOOTSTRAP_SERVERS: 'broker:29092'
        KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
        KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'

  # source systems
  # example source database postgres 14
  db:
    env_file: docker/.env-non-dev
    image: postgres:14
    container_name: superset_db
    restart: unless-stopped
    volumes:
      - db_home:/var/lib/postgresql/data

  # generating sample data using a python developed streaming data generator:
  streaming_data_generator:
    # docker container running the python streaming data generator
    build:
      context: .
      dockerfile: Dockerfile
    tty: true

# containers for druid:
  postgres:
    container_name: postgres
    image: postgres:latest
    ports:
      - "5432:5432"
    volumes:
      - metadata_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=FoolishPassword
      - POSTGRES_USER=druid
      - POSTGRES_DB=druid

  coordinator:
    image: apache/druid:26.0.0
    container_name: coordinator
    volumes:
      - druid_shared:/opt/shared
      - coordinator_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
    ports:
      - "18081:8081"
    command:
      - coordinator
    env_file:
      - environment

  druid:
    image: apache/druid:26.0.0
    container_name: druid
    volumes:
      - broker_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "18082:8082"
    command:
      - broker
    env_file:
      - environment

  historical:
    image: apache/druid:26.0.0
    container_name: historical
    volumes:
      - druid_shared:/opt/shared
      - historical_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "18083:8083"
    command:
      - historical
    env_file:
      - environment

  middlemanager:
    image: apache/druid:26.0.0
    container_name: middlemanager
    volumes:
      - druid_shared:/opt/shared
      - middle_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "18091:8091"
      - "18100-18105:8100-8105"
    command:
      - middleManager
    env_file:
      - environment

  router:
    image: apache/druid:26.0.0
    container_name: router
    volumes:
      - router_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "18888:8888"
    command:
      - router
    env_file:
      - environment

  # reporting and visualisation:
  redis:
    image: redis:7
    container_name: superset_cache
    restart: unless-stopped
    volumes:
      - redis:/data

  superset:
    env_file: docker/.env-non-dev
    image: *superset-image
    container_name: superset_app
    command: ["/app/docker/docker-bootstrap.sh", "app-gunicorn"]
    user: "root"
    restart: unless-stopped
    ports:
      - 18088:8088
    depends_on: *superset-depends-on
    volumes: *superset-volumes

  superset-init:
    image: *superset-image
    container_name: superset_init
    command: ["/app/docker/docker-init.sh"]
    env_file: docker/.env-non-dev
    depends_on: *superset-depends-on
    user: "root"
    volumes: *superset-volumes
    healthcheck:
      disable: true

  superset-worker:
    image: *superset-image
    container_name: superset_worker
    command: ["/app/docker/docker-bootstrap.sh", "worker"]
    env_file: docker/.env-non-dev
    restart: unless-stopped
    depends_on: *superset-depends-on
    user: "root"
    volumes: *superset-volumes
    healthcheck:
      test: ["CMD-SHELL", "celery -A superset.tasks.celery_app:app inspect ping -d celery@$$HOSTNAME"]

  superset-worker-beat:
    image: *superset-image
    container_name: superset_worker_beat
    command: ["/app/docker/docker-bootstrap.sh", "beat"]
    env_file: docker/.env-non-dev
    restart: unless-stopped
    depends_on: *superset-depends-on
    user: "root"
    volumes: *superset-volumes
    healthcheck:
      disable: true

  # for Apache Pinot:
  pinot-controller:
    image: apachepinot/pinot:release-0.7.1
    hostname: pinot-controller
    volumes:
      - ./pinot-docker-demo/pinot/controller:/tmp/data/controller
    ports:
      - "9000:9000"
    command: StartController -zkAddress zookeeper:2181
    depends_on:
      - broker
  pinot-broker:
    image: apachepinot/pinot:release-0.7.1
    hostname: pinot-broker
    ports:
      - "8099:8099"
    command: StartBroker -zkAddress zookeeper:2181
    depends_on:
      - zookeeper
      - broker
      - pinot-controller
  pinot-server:
    image: apachepinot/pinot:release-0.7.1
    hostname: pinot-server
    volumes:
      - ./pinot-docker-demo/pinot/server:/tmp/data/server
    ports:
      - "8098:8098"
    command: StartServer -zkAddress zookeeper:2181
    depends_on:
      - zookeeper
      - broker
      - pinot-controller

volumes:
  superset_home:
    external: false
  db_home:
    external: false
  redis:
    external: false
  metadata_data: { }
  middle_var: { }
  historical_var: { }
  broker_var: { }
  coordinator_var: { }
  router_var: { }
  druid_shared: { }


